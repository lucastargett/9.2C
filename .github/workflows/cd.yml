# Compiled CD workflows
name: CD - Deploy Backend and Frontend to AKS

on:
  workflow_dispatch:
    inputs:
      aks_cluster_name:
        description: 'Name of the AKS Cluster to deploy to'
        required: true
        default: 'aks-9-2c'
      aks_resource_group:
        description: 'Resource Group of the AKS Cluster'
        required: true
        default: 'deakinuni'
      aks_acr_name:
        description: 'Name of ACR (no .azurecr.io)'
        required: true
        default: 'lucasacr9c'
      product_api_ip:
        description: 'External IP of Product Service'
        required: false
        default: ''
      order_api_ip:
        description: 'External IP of Order Service'
        required: false
        default: ''

jobs:
  deploy_backend:
    runs-on: ubuntu-latest
    environment: Production

    env:
      AKS: ${{ github.event.inputs.aks_cluster_name }}
      RG:  ${{ github.event.inputs.aks_resource_group }}

    outputs:
      PRODUCT_API_IP: ${{ steps.get_product_ip.outputs.external_ip }}
      ORDER_API_IP:   ${{ steps.get_order_ip.outputs.external_ip }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Set Kubernetes context (get AKS credentials)
        run: az aks get-credentials --resource-group "$RG" --name "$AKS" --overwrite-existing

      - name: Attach ACR
        run: |
          az aks update \
            --name "$AKS" \
            --resource-group "$RG" \
            --attach-acr "${{ github.event.inputs.aks_acr_name }}"

      - name: Deploy Backend Infrastructure (Namespace, ConfigMaps, Secrets, Databases)
        run: |
          echo "Deploying backend infrastructure..."
          cd k8s/
          kubectl apply -f configmaps.yaml
          kubectl apply -f secrets.yaml
          kubectl apply -f product-db.yaml
          kubectl apply -f order-db.yaml

      - name: Deploy Backend Microservices (Product, Order)
        run: |
          echo "Deploying backend microservices..."
          cd k8s/
          kubectl apply -f product-service.yaml
          kubectl apply -f order-service.yaml

      - name: Wait for Backend LoadBalancer IPs
        run: |
          echo "Waiting for Product, Order LoadBalancer IPs to be assigned (up to 5 minutes)..."
          PRODUCT_IP=""
          ORDER_IP=""
          for i in $(seq 1 60); do
            echo "Attempt $i/60 to get IPs..."
            PRODUCT_IP=$(kubectl get service product-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null)
            ORDER_IP=$(kubectl get service order-service-w08e1  -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null)
            if [[ -n "$PRODUCT_IP" && -n "$ORDER_IP" ]]; then
              echo "All backend LoadBalancer IPs assigned!"
              echo "Product Service IP: $PRODUCT_IP"
              echo "Order Service IP:   $ORDER_IP"
              break
            fi
            sleep 5
          done
          if [[ -z "$PRODUCT_IP" || -z "$ORDER_IP" ]]; then
            echo "Error: One or more LoadBalancer IPs not assigned after timeout."
            exit 1
          fi
          echo "PRODUCT_IP=$PRODUCT_IP" >> $GITHUB_ENV
          echo "ORDER_IP=$ORDER_IP"     >> $GITHUB_ENV

      - name: Capture Product Service IP for Workflow Output
        id: get_product_ip
        run: echo "external_ip=${{ env.PRODUCT_IP }}" >> $GITHUB_OUTPUT

      - name: Capture Order Service IP for Workflow Output
        id: get_order_ip
        run: echo "external_ip=${{ env.ORDER_IP }}" >> $GITHUB_OUTPUT

      - name: Logout from Azure
        run: az logout

  deploy_frontend:
    runs-on: ubuntu-latest
    environment: Production
    needs: deploy_backend

    # Make ACR variables available to every step
    env:
      ACR_NAME:         ${{ github.event.inputs.aks_acr_name }}
      ACR_LOGIN_SERVER: ${{ github.event.inputs.aks_acr_name }}.azurecr.io
      AKS: ${{ github.event.inputs.aks_cluster_name }}
      RG:  ${{ github.event.inputs.aks_resource_group }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Azure Container Registry
        run: |
          if [ -z "$ACR_NAME" ]; then
            echo "ACR_NAME is empty; check workflow_dispatch inputs."
            exit 1
          fi
          echo "Logging in to ACR: $ACR_NAME"
          az acr login --name "$ACR_NAME"

      - name: Inject Backend IPs into Frontend main.js
        run: |
          echo "Injecting backend IPs into frontend/main.js"
          sed -i "s|_PRODUCT_API_URL_|${{ needs.deploy_backend.outputs.PRODUCT_API_IP }}|g" frontend/main.js
          sed -i "s|_ORDER_API_URL_|${{ needs.deploy_backend.outputs.ORDER_API_IP }}|g" frontend/main.js
          echo "--- Updated main.js ---"
          cat frontend/main.js

      - name: Build and Push Frontend Image
        run: |
          if [ -z "$ACR_LOGIN_SERVER" ]; then
            echo "ACR_LOGIN_SERVER is empty; cannot build image tag."
            exit 1
          fi
          FULL_IMAGE="$ACR_LOGIN_SERVER/frontend:latest"
          echo "Building image: $FULL_IMAGE"
          docker build -t "$FULL_IMAGE" ./frontend/
          docker push "$FULL_IMAGE"

      - name: Set Kubernetes context (get AKS credentials)
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.RG }}
          cluster-name:  ${{ env.AKS }}

      - name: Deploy Frontend to AKS
        run: |
          echo "Deploying frontend to AKS: $AKS"
          cd k8s/
          kubectl apply -f frontend.yaml

      - name: Logout from Azure
        run: az logout